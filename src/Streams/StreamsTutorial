Source --> Filter --> Sort --> Map --> Collect -->
About Streams
    -   Streams represents a sequence of objects, a stream operates on a data source, such as an array or collections
    -   A stream itself, never provides storage for the data.
    -   It simply moves data, possibly filtering, sorting or otherwise operating on that data.
    -   A stream operation by itself does not modify the data source.

Stream Source
    -   Streams can be created from Collections, Lists, Sets, ints, longs, doubles, arrays, lines of a file

Stream operations are either intermediate or terminal.
    -   Intermediate operations sucha as filter, map or sort return a stream so we can chain multiple intermediate operations.
    -   Terminal operations such as forEach, collect or reduce are either void or return a non-stream result.

Intermediate Operations
    -   Zero or more intermediate operations are allowed.
    -   Order matters for large datasets: filter first, then sort or map.
    -   For very large datasets use ParallelStream to enable multiple threads.
    -   Intermediate operations include:
            anyMatch()
            distinct()
            filter()
            findFirst()
            flatmap()
            map()
            skip()
            sorted()

Terminal Operations
    -   forEach applies the same function to each element.
    -   collect saves the elements into collection.
    -   other options reduce the stream to a single summary element.
        count()
        min()
        max()
        reduce()
        summaryStatistics()

