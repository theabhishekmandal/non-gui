What can we do with Java Reflection ?
    -   Using Reflection we can write flexible API that
        -   Links different software components together at runtime.
        -   Creates new program flow without any source code modifications.

    -   Reflection allows writing general purpose algorithms that dynamically
        adapt and change their behaviour based on the type of objects or classes
        they are working on.
    -   With the ability to analyze application's objects and classes at Runtime
        -   We can create very powerful
            -   Libraries
            -   Frameworks
            -   Software Designs
            that would otherwise be impossible.


Reflection Entry point Class<?>
    -   Class<?> is an entry point for us to reflect on our application's code
    -   An object of Class<?> contains all the information on
        -   A given object's runtime type
        -   A class in our application
    -   That information includes
        -   What methods and fields it contains
        -   What classes it extends
        -   What interfaces it implements

Three ways to obtain the Class<?> object
    -   Object.getClass()   -   When you have an instance of a particular class then just call .getClass()
                                method to get the Class<?> object.
                                Eg: String one = "hello"; Class<String> stringClass = one.getClass();
                            -   No .getClass() method on primitive types

    -   .class              -   When you don't have an instance of a particular class then use .class
                                Eg: Class<String> stringClass = String.class;
                            -   Works on primitive types as well Eg: Class booleanType = boolean.class;

    -   Class.forName(...)  -   Using static method to get Class information.
                                Eg: Class<?> stringType = Class.forName("java.lang.String");
                                    Class<?> engineType = Class.forName("vehicles.Car$Engine");

                            -   No Class.forName() for Primitive Types. If used we will get Runtime Error
                                and not compilation error.


Notes on Class.forName()
    -   Much more likely to mistype the class name and get the ClassNotFoundException
    -   The class we pass into Class.forName(...) may not even exist
    -   Class.forName(...) is the least safest way to get the Class<?> object.
    -   There are use cases where Class.forName(...) is our only option.
        -   When we want to load from a config file.
        -   When class is not present at compile time such as of a library and is only present at
            runtime.

Class<?> Java Wildcards
    -   Using Class<?> we can describe a class object of any parameter type
    -   Class<?> is super type to Class<T> of any type T



java.lang.reflect.Constructor<?>
    -   A constructor of Java class is represented by an instance of Constructor<?> class
    -   The constructor object contains all information about the class's constructor including:
        -   Number of parameters
        -   Type of parameters

    -   A class may have multiple constructors.

Methods to get Constructor<?> objects
    -   Class.getDeclaredConstructors()
        -   Returns all the declared constructors within the class
        -   Includes all the public and non-public constructors.
    -   Class.getConstructors()
        -   Returns only public constructors
    -   If you know the particular constructor parameter types we call:
        -   Class.getConstructor(Class<?>... parameterTypes) or
        -   Class.getDeclaredConstructor(Class<?>... parameterTypes)


Goal and Motivation - Object Creator
    -   Implement single "factory" method that can create an object of any class.
    -   Depending on the arguments passed to our method, it will find the right constructor.
    -   Create the given class object by calling the right constructor.
    -   Without Reflection it is impossible.

How we will do it?
    -   Constructor.newInstance(Object... arguments)
        -   Takes a variable number of constructor arguments in the type and
            order of constructor parameters declared in the constructor.
    -   Upon Success
        -   Calls the appropriate constructor
        -   Returns an object of the given class
    -   Upon failure
        -   Throws an appropriate exception, describing the reason of the failure.


What is the need of creating private constructors using reflection?
    -   Let's say you want to create some configuration object. But, do not want to
        expose it's constructor as public.
    -   Then through reflection you can create that configuration object.


Package Private classes External Access
    -   There are classes where we need to allow access to package-private classes from outside
        the package for:
        -   Reading
        -   Initializing
    -   Typically when we want to use an external library to help us initialize those classes. Eg. Spring Framework
    -   The code in the external libraries is outside of our package.

Use cases for Access Package-Private classes using Reflection
    -   Parsing to/from Java Object
        -   Eg: Using ObjectMapper to convert to/from Java objects.
    -   Dependency Injection
        -   Instantiation of Package-Private classes from another package
        -   Auto creation of objects at Application startup


Proxy design pattern
    -   A proxy object which acts as a surrogate for another object
    -   A proxy object wraps the original object and controls all the access
        to its methods and data.
    -   Client talks to the main object via proxy, where proxy object delegates
        the call to the main object.
    -   Types of Proxy
        -   Protection Proxy
            -   Adding security checks before delegating to actual object.
            -   If security check fails then return the error.
        -   Resource Management - Lazy Initialisation Proxy.
            -   Sometimes we want to delay creation of expensive objects like:
                -   Database connections.
                -   Large Arrays.
                -   Large Configuration files.
                -   Large Data files.
                until they are actually needed.
            -   We can wrap the expensive original object with a proxy that delays
                its creation.
            -   This can save us on memory (and improve the performance or application stability)
        -   Performance - Caching Proxy
        -   Remote Procedure Calls - Remote Proxy.
    -   Proxy Limitations
        -   To implement the measuring proxy where there are
            -   M methods in each interface.
            -   N interfaces.
        -   We need to create N proxy classes and implement N * M methods in total.
        -   A lot of manual code duplication which is
            -   Tedious
            -   Time consuming
            -   Error Prone.

    -   Dynamic Proxy - Introduction
        -   A Dynamic proxy class is generated by the Reflection at runtime.
        -   Its name usually starts with $Proxy. Example: "$Proxy0"
        -   The Dynamic Proxy class implements the interfaces that we provide at runtime.
        -   An object of a Dynamic Proxy class intercepts any method invocation and delegates
            it to an instance of an InvocationHandler.


-   Java Reflection Performance
    -   Java Reflection is NOT slow in general.
    -   There are many slower operations we use on daily basis.
    -   Typically operations involving Java Reflection are slower and less efficient
        than their statically compiled equivalent operations.
            -   Like reading a field using a getter will be faster as compared to reading
                it via reflection.
            -   Similarly setting a value using setter will be faster as compared to setting
                it via reflection.
    -   There are many factors contributing to the additional cost of Java Reflection
        -   Reflection operations are very generic. They must find common denominator so they
            can work with all types in a similar way.
            Like for eg: method.invoke provides result of Object type. For primitives extra
            boxing and unboxing is required with reflection.
        -   Operations that the compiler would do for us ahead of time during compilation
            now happens at runtime. Like for example using annotation for reflection with policy
            as runtime.
            -   Checks that compiler does for us at compile time as follows
                Product product = new ProductImpl("game");
                -   ProductImpl class exists and is accessible.
                -   Checks constructor parameter types.
                -   Validates a constructor with the given type parameters exists and is
                    accessible.
                -   Checks ProductImpl class is assignable to Product.
            -   By using reflection
                Constructor<?> const = ...
                Product product = (Product) const.newInstance("game");
                -   The constructor/class is resolved at runtime. The compiler cannot
                    make any ascess/type safety validations.
                -   At Runtime the JVM has to validate:
                    -   Constructor is accessible.
                    -   Parameter type matches the argument type.
                    -   Object created by newInstance is assignable to a Product.
            -   Because we delegate almost everything from Compile Time to Runtime, some
                compiler optimizations become unavailable to us.
                    -   For eg:
                            public class Product {
                                public static final int basePrice = 5;
                                public static final int transactionfee = 3;
                            }
                            int minimumPrice = Product.basePrice + Product.transactionfee;
                            compiler will replace above with
                            int minimumPrice = 7;
                    -   In Reflection
                        Field basePrice = clazz.getField("basePrice");
                        Field transactionfee = clazz.getField("transactionfee");
                        int minimumPrice = basePrice.getInt(product) + basePrice.getInt(product);

                        No compiler optimizations since it cannot assume anything about its values
                        or modifiers.

                        Some performance optimizations may still be performed by the JIT.
                        However size of the binary would not be reduced.
-   Code Safety
    -   While using reflection one can use wrong parameter type, wrong constructor or wrong
        argument type or wrong casting.
    -   Some internal classes in jdk8+ are not accessible via reflection since they are present
        as modules.
    -   Even when we do manage to get access to internal fields/methods/classes.. Using Reflection we may
        have adverse effects.
    -   Typically internal classes / private fields and methods were made non-public for a reason
    -   Accessing or modifying internal code may lead to errors and exceptions.

-   Exception Handling
    -   Reflections also handles some of the exceptions.
    -   Like calling a method that does not exists. At compile time will give error.
        Using reflection it will throw NoSuchMethodException which is a Checked Exception
        that we must handle.
    -   Also, if different parameter is passed to a method that during compile time it gives
        error. By using reflection it will throw IllegalArgumentException which is also a checked
        exception.
    -   In Production, all these checked exceptions must be handled properly.

-   Reflection best Practices - 3 rules of Thumb
    -   Use Reflection Only When We Must
    -   Test and handle every edge case.
    -   Keep Reflection Code Loosely Coupled.
